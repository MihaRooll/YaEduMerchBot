name: YaEduMerchBot PR Preview

on:
  pull_request:
    branches: ["main"]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  packages: write
  pull-requests: write

concurrency:
  group: pr-preview-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  build-and-push-pr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set env (lowercase user, IMAGE, PR_NUM)
        run: |
          echo "PR_NUM=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "DH_USER=$(echo '${{ secrets.DOCKERHUB_USERNAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "IMAGE=$(echo '${{ secrets.DOCKERHUB_USERNAME }}' | tr '[:upper:]' '[:lower:]')/yaedumerchbot" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push PR image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE }}:pr-${{ env.PR_NUM }}-latest
            ${{ env.IMAGE }}:pr-${{ env.PR_NUM }}-${{ github.sha }}

  deploy-preview:
    needs: build-and-push-pr
    runs-on: [self-hosted, Windows, X64, yaedumerchbot]
    timeout-minutes: 30
    env:
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      ADMIN_IDS: ${{ secrets.ADMIN_IDS }}
      PAYMENT_TOKEN: ${{ secrets.PAYMENT_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Set env for Windows job
        shell: powershell
        run: |
          $u='${{ secrets.DOCKERHUB_USERNAME }}'.ToLower()
          "IMAGE=$u/yaedumerchbot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "PR_NUM=${{ github.event.pull_request.number }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "IMAGE=$u/yaedumerchbot; PR_NUM=$env:PR_NUM"

      - name: Runner & Docker info
        shell: powershell
        run: |
          whoami
          $PSVersionTable
          docker version
          (docker compose version) -or (docker-compose --version)

      - name: Login DockerHub on remote
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull PR image
        shell: powershell
        run: |
          docker pull "$($env:IMAGE):pr-$($env:PR_NUM)-latest"

      - name: Ensure compose.preview.yml exists
        shell: powershell
        run: |
          if (!(Test-Path 'compose.preview.yml')) {
            $lines = @(
              'services:',
              '  yaedumerchbot-preview:',
              ('    image: ' + $env:IMAGE + ':pr-' + $env:PR_NUM + '-latest'),
              ('    container_name: yaedumerchbot-pr-' + $env:PR_NUM),
              '    restart: unless-stopped',
              '    environment:',
              '      - BOT_TOKEN=${BOT_TOKEN}',
              '      - DATABASE_URL=${DATABASE_URL}',
              '      - ADMIN_IDS=${ADMIN_IDS}',
              '      - PAYMENT_TOKEN=${PAYMENT_TOKEN}',
              '      - LOG_LEVEL=DEBUG',
              '      - DEBUG=True',
              '    volumes:',
              '      - bot_data_pr_${PR_NUM}:/app/data',
              '      - ./logs:/app/logs',
              '',
              'volumes:',
              '  bot_data_pr_${PR_NUM}:',
              '    driver: local'
            )
            Set-Content -Path 'compose.preview.yml' -Value $lines -Encoding UTF8
          }

      - name: Up preview stack
        shell: powershell
        env:
          BOT_TOKEN: ${{ env.BOT_TOKEN }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
          ADMIN_IDS: ${{ env.ADMIN_IDS }}
          PAYMENT_TOKEN: ${{ env.PAYMENT_TOKEN }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        run: |
          if ($env:BOT_TOKEN) { echo "::add-mask::$($env:BOT_TOKEN)" }
          if ($env:PAYMENT_TOKEN) { echo "::add-mask::$($env:PAYMENT_TOKEN)" }
          docker compose -f compose.preview.yml -p yaedumerchbot_pr_$env:PR_NUM up -d --remove-orphans --no-build

      - name: Collect preview logs (always)
        shell: powershell
        if: always()
        continue-on-error: true
        run: |
          docker compose -f compose.preview.yml -p yaedumerchbot_pr_$env:PR_NUM logs --no-color > preview.log 2>&1
          if (!(Test-Path -Path 'preview.log')) { '' | Out-File -FilePath 'preview.log' -Encoding utf8 }

      - name: Sanitize logs (mask tokens)
        shell: powershell
        if: always()
        run: |
          $c = Get-Content -Path 'preview.log' -Raw -ErrorAction SilentlyContinue
          if ($null -eq $c) { $c = '' }
          Add-Type -AssemblyName 'System.Text.RegularExpressions'
          $c = [System.Text.RegularExpressions.Regex]::Replace($c, '\b\d{9}:[A-Za-z0-9_-]{35}\b', '***')
          $c = [System.Text.RegularExpressions.Regex]::Replace($c, '(?i)(BOT_TOKEN|API_KEY|TOKEN|SECRET)\s*[:=]\s*([^\s]+)', '$1=***')
          Set-Content -Path 'preview.sanitized.log' -Value $c -Encoding UTF8
          (Get-Content 'preview.sanitized.log' -Tail 200) | Out-File 'pr-tail.log' -Encoding UTF8
          if (!(Test-Path -Path 'pr-tail.log')) { '' | Out-File -FilePath 'pr-tail.log' -Encoding utf8 }

      - name: Upload full logs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-${{ env.PR_NUM }}-logs
          path: preview.sanitized.log
          retention-days: 7

      - name: Add tail to PR comment (200 lines)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const pr = context.payload.pull_request.number;
            let body = 'No logs captured';
            try {
              if (fs.existsSync('pr-tail.log')) {
                const tail = fs.readFileSync('pr-tail.log','utf8');
                body = "```\n" + tail + "\n```";
              }
            } catch (e) {}
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: pr,
              body: "ðŸ§ª YaEduMerchBot Preview logs (last 200 lines):\n" + body
            });

      - name: Step Summary (tail)
        if: always()
        shell: powershell
        run: |
          "### YaEduMerchBot Preview logs (last 200 lines)" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
          '```' | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
          if (Test-Path 'pr-tail.log') { Get-Content 'pr-tail.log' | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8 }
          '```' | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
