name: YaEduMerchBot CI/CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  packages: write

concurrency:
  group: deploy-${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set IMAGE env (lowercase username)
        run: echo "IMAGE=$(echo '${{ secrets.DOCKERHUB_USERNAME }}' | tr '[:upper:]' '[:lower:]')/yaedumerchbot" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE }}:latest
            ${{ env.IMAGE }}:${{ github.sha }}

  deploy:
    needs: build-and-push-docker
    runs-on: [self-hosted, Windows, X64, yaedumerchbot]
    timeout-minutes: 30
    env:
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
      TG_TOKEN: ${{ secrets.TG_TOKEN }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      ADMIN_IDS: ${{ secrets.ADMIN_IDS }}
      PAYMENT_TOKEN: ${{ secrets.PAYMENT_TOKEN }}
      WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
      # WEBHOOK_PORT можно не задавать — в compose.yml есть дефолт 8443
    steps:
      - uses: actions/checkout@v4

      - name: Set IMAGE env (lowercase username)
        shell: powershell
        run: |
          $u='${{ secrets.DOCKERHUB_USERNAME }}'.ToLower()
          "IMAGE=$u/yaedumerchbot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "IMAGE=$u/yaedumerchbot"

      - name: Runner & Docker info
        shell: powershell
        run: |
          whoami
          $PSVersionTable
          docker version
          (docker compose version) -or (docker-compose --version)

      - name: Login DockerHub on remote
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull image
        shell: powershell
        run: |
          Write-Host "Pulling $($env:IMAGE):latest"
          docker pull "$($env:IMAGE):latest"

      - name: Compose config (debug)
        shell: powershell
        run: docker compose -f compose.yml config

      - name: "Preflight: free 8443 (stop our old containers, detect foreign holders)"
        shell: powershell
        run: |
          # 1) Остановим наши контейнеры (prod/preview), если они держат 8443
          $holders = docker ps --format "{{.ID}} {{.Names}} {{.Ports}}" | Select-String '0\.0\.0\.0:8443->'
          $stoppedAny = $false
          $foreign = $false
          if ($holders) {
            foreach ($line in $holders) {
              $t = $line.ToString().Trim().Split(' ',3,[System.StringSplitOptions]::RemoveEmptyEntries)
              $id = $t[0]; $name = $t[1]
              if ($name -match '^yaedumerchbot($|-)') {
                Write-Host "Stopping our container using 8443: $name ($id)"
                docker stop $id | Out-Null
                docker rm $id | Out-Null
                $stoppedAny = $true
              } else {
                Write-Host "Another container holds 8443: $name ($id) — will not stop automatically."
                $foreign = $true
              }
            }
          } else {
            Write-Host "No Docker containers currently publish 0.0.0.0:8443"
          }

          # 2) Диагностика OS-процессов, слушающих 8443 (не убиваем, только логируем)
          try {
            $tcp = Get-NetTCPConnection -LocalPort 8443 -ErrorAction SilentlyContinue | Where-Object {$_.State -eq 'Listen'}
            if ($tcp) {
              Write-Host "WARNING: Port 8443 is used by OS process(es):"
              foreach ($c in $tcp) {
                $pid = $c.OwningProcess
                try {
                  $p = Get-Process -Id $pid -ErrorAction Stop
                  Write-Host (" - PID {0} : {1}" -f $pid, $p.ProcessName)
                } catch {
                  Write-Host (" - PID {0}" -f $pid)
                }
              }
            }
          } catch {
            Write-Host "Get-NetTCPConnection is not available; skipping OS-level diagnostics."
          }

          # 3) Если 8443 занят НЕ нашим контейнером — падаем рано с понятным сообщением
          #    (чтобы не ловить потом 'Bind for 0.0.0.0:8443 failed')
          $stillBusy = $false
          $check = docker ps --format "{{.ID}} {{.Names}} {{.Ports}}" | Select-String '0\.0\.0\.0:8443->'
          if ($check) {
            foreach ($line in $check) {
              $t = $line.ToString().Trim().Split(' ',3,[System.StringSplitOptions]::RemoveEmptyEntries)
              $name = $t[1]
              if ($name -notmatch '^yaedumerchbot($|-)') {
                $stillBusy = $true
              }
            }
          }
          if ($stillBusy) {
            Write-Error "Port 8443 is occupied by non-YaEduMerch container(s). Free it manually or change WEBHOOK_PORT/compose before deploy."
            exit 1
          }

      - name: Up stack
        shell: powershell
        env:
          BOT_TOKEN: ${{ env.BOT_TOKEN }}
          TG_TOKEN: ${{ env.TG_TOKEN }}
          DATABASE_URL: ${{ env.DATABASE_URL }}
          ADMIN_IDS: ${{ env.ADMIN_IDS }}
          PAYMENT_TOKEN: ${{ env.PAYMENT_TOKEN }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          WEBHOOK_URL: ${{ env.WEBHOOK_URL }}
          WEBHOOK_PORT: ${{ env.WEBHOOK_PORT }}
        run: |
          if ($env:BOT_TOKEN) { echo "::add-mask::$($env:BOT_TOKEN)" }
          if ($env:TG_TOKEN) { echo "::add-mask::$($env:TG_TOKEN)" }
          if ($env:PAYMENT_TOKEN) { echo "::add-mask::$($env:PAYMENT_TOKEN)" }
          docker compose -f compose.yml -p yaedumerchbot up -d --remove-orphans --no-build

      # ===== ЛОГИ: сбор, маскировка, артефакт, комментарий к коммиту =====
      - name: Collect deploy logs (always)
        shell: powershell
        if: always()
        continue-on-error: true
        run: |
          docker compose -f compose.yml -p yaedumerchbot logs --no-color > deploy.log 2>&1
          if (!(Test-Path -Path 'deploy.log')) { '' | Out-File -FilePath 'deploy.log' -Encoding utf8 }

      - name: Sanitize logs (mask tokens)
        shell: powershell
        if: always()
        run: |
          $c = Get-Content -Path 'deploy.log' -Raw -ErrorAction SilentlyContinue
          if ($null -eq $c) { $c = '' }
          Add-Type -AssemblyName 'System.Text.RegularExpressions'
          $c = [System.Text.RegularExpressions.Regex]::Replace($c, '\b\d{9}:[A-Za-z0-9_-]{35}\b', '***')  # Telegram
          $c = [System.Text.RegularExpressions.Regex]::Replace($c, '(?i)(BOT_TOKEN|API_KEY|TOKEN|SECRET)\s*[:=]\s*([^\s]+)', '$1=***')
          Set-Content -Path 'deploy.sanitized.log' -Value $c -Encoding UTF8
          (Get-Content 'deploy.sanitized.log' -Tail 200) | Out-File 'deploy.tail.log' -Encoding UTF8
          if (!(Test-Path -Path 'deploy.tail.log')) { '' | Out-File -FilePath 'deploy.tail.log' -Encoding utf8 }

      - name: Upload full logs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-logs-${{ github.sha }}
          path: deploy.sanitized.log
          retention-days: 7

      - name: Comment logs on commit (tail)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let body = 'No logs captured';
            try {
              if (fs.existsSync('deploy.tail.log')) {
                const tail = fs.readFileSync('deploy.tail.log','utf8');
                body = "```\n" + tail + "\n```";
              }
            } catch (e) {}
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: "🚀 YaEduMerchBot Deploy logs (last 200 lines):\n" + body
            });

      - name: Step Summary (tail)
        if: always()
        shell: powershell
        run: |
          "### YaEduMerchBot Deploy logs (last 200 lines)" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
          '```' | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
          if (Test-Path 'deploy.tail.log') { Get-Content 'deploy.tail.log' | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8 }
          '```' | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8

      - name: Cleanup
        shell: powershell
        run: docker image prune -f
