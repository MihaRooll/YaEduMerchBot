import logging
from telebot.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from telebot.handler_backends import State, StatesGroup
from typing import Dict, Any, List
from ..storage import storage
from ..auth import role_manager
from ..keyboards import get_back_keyboard

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ—Ä—á–∞
class MerchSettingsStates(StatesGroup):
    waiting_for_product_name = State()
    waiting_for_product_type = State()
    waiting_for_product_color = State()
    waiting_for_product_sizes = State()
    waiting_for_quantity = State()
    waiting_for_size_name = State()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
merch_data = {}

def register_merch_settings_handlers(bot, chat_manager):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ—Ä—á–∞"""
    
    @bot.message_handler(commands=['merch'])
    def handle_merch_command(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /merch - –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –º–µ—Ä—á–∞"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not role_manager.has_permission(user_id, "admin"):
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ—Ä—á–∞
        _show_merch_settings_menu(bot, chat_id, user_id, chat_manager)
    
    @bot.message_handler(state=MerchSettingsStates.waiting_for_product_name)
    def handle_product_name_input(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        logger.info(f"üéØ FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ waiting_for_product_name —Å—Ä–∞–±–æ—Ç–∞–ª!")
        logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"üéØ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {bot.get_state(user_id, chat_id)}")
        logger.info(f"üéØ –û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {MerchSettingsStates.waiting_for_product_name}")
        logger.info(f"üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"üéØ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
        
        if not role_manager.has_permission(user_id, "admin"):
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞")
            return
        
        logger.info(f"‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        product_name = message.text.strip()
        if len(product_name) < 3:
            logger.info(f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ: '{product_name}'")
            bot.reply_to(message, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
            return
        
        logger.info(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤–∞–ª–∏–¥–Ω–æ: '{product_name}'")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        if user_id not in merch_data:
            merch_data[user_id] = {}
        merch_data[user_id]['name'] = product_name
        
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: '{product_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        logger.info(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {merch_data[user_id]}")
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
        logger.info(f"üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é waiting_for_product_type –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        bot.set_state(user_id, MerchSettingsStates.waiting_for_product_type, chat_id)
        logger.info(f"‚úÖ –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {bot.get_state(user_id, chat_id)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        logger.info(f"üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        _show_product_type_selection(bot, chat_id, user_id, chat_manager)
    
    @bot.message_handler(state=MerchSettingsStates.waiting_for_product_type)
    def handle_product_type_input(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        if not role_manager.has_permission(user_id, "admin"):
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞")
            return
        
        product_type = message.text.strip().lower()
        valid_types = ['longsleeve', 'tshirt', 'hoodie', 'sweatshirt', 'other']
        
        if product_type not in valid_types:
            bot.reply_to(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: {', '.join(valid_types)}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
        merch_data[user_id]['type'] = product_type
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞
        bot.set_state(user_id, MerchSettingsStates.waiting_for_product_color, chat_id)
        _show_color_selection(bot, chat_id, user_id, chat_manager)
    
    @bot.message_handler(state=MerchSettingsStates.waiting_for_product_color)
    def handle_product_color_input(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        if not role_manager.has_permission(user_id, "admin"):
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞")
            return
        
        color = message.text.strip().lower()
        valid_colors = ['white', 'black', 'gray', 'blue', 'red', 'green', 'yellow', 'pink', 'purple', 'orange']
        
        if color not in valid_colors:
            bot.reply_to(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞: {', '.join(valid_colors)}")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞
        merch_data[user_id]['color'] = color
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞–∑–º–µ—Ä–æ–≤
        bot.set_state(user_id, MerchSettingsStates.waiting_for_quantity, chat_id)
        _show_size_setup(bot, chat_id, user_id, chat_manager)
    
    @bot.message_handler(state=MerchSettingsStates.waiting_for_quantity)
    def handle_quantity_input(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        if not role_manager.has_permission(user_id, "admin"):
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞")
            return
        
        try:
            quantity = int(message.text.strip())
            if quantity <= 0:
                bot.reply_to(message, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
        except ValueError:
            bot.reply_to(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        current_size = merch_data[user_id].get('current_size')
        if current_size:
            if 'sizes' not in merch_data[user_id]:
                merch_data[user_id]['sizes'] = {}
            merch_data[user_id]['sizes'][current_size] = quantity
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º
        _show_next_size_or_finish(bot, chat_id, user_id, chat_manager)
    
    @bot.message_handler(state=MerchSettingsStates.waiting_for_size_name)
    def handle_size_name_input(message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        logger.info(f"üéØ FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ waiting_for_size_name —Å—Ä–∞–±–æ—Ç–∞–ª!")
        logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if not role_manager.has_permission(user_id, "admin"):
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞")
            return
        
        size_name = message.text.strip().upper()
        if len(size_name) < 1 or len(size_name) > 5:
            bot.reply_to(message, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 5 —Å–∏–º–≤–æ–ª–æ–≤")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ä–∞–∑–º–µ—Ä
        inventory = storage.get_all("inventory.json")
        existing_sizes = inventory.get('sizes', {})
        
        if size_name in existing_sizes:
            bot.reply_to(message, f"‚ùå –†–∞–∑–º–µ—Ä {size_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        if 'sizes' not in inventory:
            inventory['sizes'] = {}
        
        inventory['sizes'][size_name] = {
            'qty_total': 0,
            'qty_reserved': 0
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        success = storage.save_json_atomic("inventory.json", inventory)
        
        if success:
            content = f"‚úÖ –†–∞–∑–º–µ—Ä <b>{size_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            content += "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤."
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            bot.delete_state(user_id, chat_id)
            
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ä–∞–∑–º–µ—Ä", callback_data="merch_add_size"),
                InlineKeyboardButton("üìè –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞–º–∏", callback_data="merch_manage_sizes"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="merch_general_settings")
            )
            
            chat_manager.update_chat_message(chat_id, content, keyboard)
        else:
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    @bot.callback_query_handler(func=lambda call: call.data == "merch_manage_sizes")
    def handle_manage_sizes(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞–º–∏"""
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        if not role_manager.has_permission(user_id, "admin"):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        _show_sizes_management(bot, chat_id, user_id, chat_manager)
        bot.answer_callback_query(call.id)
    
    @bot.callback_query_handler(func=lambda call: call.data == "merch_manage_colors")
    def handle_manage_colors(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞–º–∏"""
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        if not role_manager.has_permission(user_id, "admin"):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        _show_colors_management(bot, chat_id, user_id, chat_manager)
        bot.answer_callback_query(call.id)
    
    @bot.callback_query_handler(func=lambda call: call.data == "merch_order_stats")
    def handle_order_stats(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤"""
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        if not role_manager.has_permission(user_id, "admin"):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        _show_order_statistics(bot, chat_id, user_id, chat_manager)
        bot.answer_callback_query(call.id)
    
    @bot.callback_query_handler(func=lambda call: call.data == "merch_general_settings")
    def handle_general_settings(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ—Ä—á–∞"""
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        if not role_manager.has_permission(user_id, "admin"):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        _show_general_merch_settings(bot, chat_id, user_id, chat_manager)
        bot.answer_callback_query(call.id)
    
    @bot.callback_query_handler(func=lambda call: call.data == "merch_add_product")
    def handle_add_product(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        logger.info(f"üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
        logger.info(f"üéØ Chat ID: {chat_id}")
        
        if not role_manager.has_permission(user_id, "admin"):
            logger.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        logger.info(f"‚úÖ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if user_id in merch_data:
            logger.info(f"üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            del merch_data[user_id]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        logger.info(f"üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_product_name –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        bot.set_state(user_id, MerchSettingsStates.waiting_for_product_name, chat_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å
        current_state = bot.get_state(user_id, chat_id)
        logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {current_state}")
        logger.info(f"‚úÖ –û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {MerchSettingsStates.waiting_for_product_name}")
        logger.info(f"‚úÖ Chat ID –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {chat_id}")
        
        if current_state == MerchSettingsStates.waiting_for_product_name:
            logger.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            _show_add_product_form(bot, chat_id, user_id, chat_manager)
        else:
            logger.info(f"‚ÑπÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º. –¢–µ–∫—É—â–µ–µ: {current_state}")
            # –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É, —Ç–∞–∫ –∫–∞–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
            _show_add_product_form(bot, chat_id, user_id, chat_manager)
        
        bot.answer_callback_query(call.id)
    
    @bot.callback_query_handler(func=lambda call: call.data == "merch_view_products")
    def handle_view_products(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        if not role_manager.has_permission(user_id, "admin"):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        _show_products_list(bot, chat_id, user_id, chat_manager)
        bot.answer_callback_query(call.id)
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("merch_product_"))
    def handle_product_actions(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏"""
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        if not role_manager.has_permission(user_id, "admin"):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        action = call.data.replace("merch_product_", "")
        
        if action.startswith("toggle_"):
            product_id = action.replace("toggle_", "")
            _toggle_product_status(bot, chat_id, user_id, product_id, chat_manager)
        elif action.startswith("edit_"):
            product_id = action.replace("edit_", "")
            _show_edit_product_form(bot, chat_id, user_id, product_id, chat_manager)
        elif action.startswith("delete_"):
            product_id = action.replace("delete_", "")
            _show_delete_product_confirm(bot, chat_id, user_id, product_id, chat_manager)
        
        bot.answer_callback_query(call.id)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞–º–∏
    @bot.callback_query_handler(func=lambda call: call.data == "merch_add_size")
    def handle_add_size(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        if not role_manager.has_permission(user_id, "admin"):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        bot.set_state(user_id, MerchSettingsStates.waiting_for_size_name, chat_id)
        _show_add_size_form(bot, chat_id, user_id, chat_manager)
        bot.answer_callback_query(call.id)
    
    @bot.callback_query_handler(func=lambda call: call.data == "merch_remove_size")
    def handle_remove_size(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        if not role_manager.has_permission(user_id, "admin"):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        _show_remove_size_selection(bot, chat_id, user_id, chat_manager)
        bot.answer_callback_query(call.id)
    
    @bot.callback_query_handler(func=lambda call: call.data == "merch_edit_sizes")
    def handle_edit_sizes(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤"""
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        if not role_manager.has_permission(user_id, "admin"):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        _show_edit_sizes_form(bot, chat_id, user_id, chat_manager)
        bot.answer_callback_query(call.id)
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("merch_delete_size_"))
    def handle_delete_size_confirm(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        if not role_manager.has_permission(user_id, "admin"):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        size_to_delete = call.data.replace("merch_delete_size_", "")
        _show_delete_size_confirm(bot, chat_id, user_id, size_to_delete, chat_manager)
        bot.answer_callback_query(call.id)
    
    @bot.callback_query_handler(func=lambda call: call.data.startswith("merch_confirm_delete_size_"))
    def handle_confirm_delete_size(call: CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        if not role_manager.has_permission(user_id, "admin"):
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            return
        
        size_to_delete = call.data.replace("merch_confirm_delete_size_", "")
        _delete_size(bot, chat_id, user_id, size_to_delete, chat_manager)
        bot.answer_callback_query(call.id)
    


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def _show_merch_settings_menu(bot, chat_id: int, user_id: int, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–µ—Ä—á–∞"""
    content = "üõç <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞</b>\n\n"
    content += "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:\n\n"
    content += "üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b> –î–æ–±–∞–≤–ª–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ\n"
    content += "üìè <b>–†–∞–∑–º–µ—Ä—ã:</b> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏\n"
    content += "üé® <b>–¶–≤–µ—Ç–∞:</b> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä–æ–π\n"
    content += "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤\n"
    content += "‚öôÔ∏è <b>–û–±—â–∏–µ:</b> –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="merch_add_product"),
        InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="merch_view_products"),
        InlineKeyboardButton("üìè –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞–º–∏", callback_data="merch_manage_sizes"),
        InlineKeyboardButton("üé® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞–º–∏", callback_data="merch_manage_colors"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤", callback_data="merch_order_stats"),
        InlineKeyboardButton("‚öôÔ∏è –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="merch_general_settings"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_merch_settings")
    )
    
    chat_manager.update_chat_message(chat_id, content, keyboard)

def _show_add_product_form(bot, chat_id: int, user_id: int, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    content = "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
    content += "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –õ–æ–Ω–≥—Å–ª–∏–≤ –±–µ–ª—ã–π):"
    
    keyboard = get_back_keyboard("merch_general_settings")
    
    chat_manager.update_chat_message(chat_id, content, keyboard)

def _show_product_type_selection(bot, chat_id: int, user_id: int, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞"""
    content = "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
    content += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã:\n"
    content += "‚Ä¢ longsleeve - –õ–æ–Ω–≥—Å–ª–∏–≤\n"
    content += "‚Ä¢ tshirt - –§—É—Ç–±–æ–ª–∫–∞\n"
    content += "‚Ä¢ hoodie - –•—É–¥–∏\n"
    content += "‚Ä¢ sweatshirt - –°–≤–∏—Ç—à–æ—Ç\n"
    content += "‚Ä¢ other - –î—Ä—É–≥–æ–µ\n\n"
    content += "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:"
    
    keyboard = get_back_keyboard("merch_general_settings")
    
    chat_manager.update_chat_message(chat_id, content, keyboard)

def _show_color_selection(bot, chat_id: int, user_id: int, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞"""
    content = "üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
    content += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞:\n"
    content += "‚Ä¢ white - –ë–µ–ª—ã–π\n"
    content += "‚Ä¢ black - –ß–µ—Ä–Ω—ã–π\n"
    content += "‚Ä¢ gray - –°–µ—Ä—ã–π\n"
    content += "‚Ä¢ blue - –°–∏–Ω–∏–π\n"
    content += "‚Ä¢ red - –ö—Ä–∞—Å–Ω—ã–π\n"
    content += "‚Ä¢ green - –ó–µ–ª–µ–Ω—ã–π\n"
    content += "‚Ä¢ yellow - –ñ–µ–ª—Ç—ã–π\n"
    content += "‚Ä¢ pink - –†–æ–∑–æ–≤—ã–π\n"
    content += "‚Ä¢ purple - –§–∏–æ–ª–µ—Ç–æ–≤—ã–π\n"
    content += "‚Ä¢ orange - –û—Ä–∞–Ω–∂–µ–≤—ã–π\n\n"
    content += "–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞:"
    
    keyboard = get_back_keyboard("merch_general_settings")
    
    chat_manager.update_chat_message(chat_id, content, keyboard)

def _show_size_setup(bot, chat_id: int, user_id: int, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞–∑–º–µ—Ä–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    inventory = storage.get_all("inventory.json")
    available_sizes = list(inventory.get('sizes', {}).keys())
    
    if not available_sizes:
        content = "‚ùå <b>–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤</b>\n\n"
        content += "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.\n\n"
        content += "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞–º–∏¬ª."
        
        keyboard = get_back_keyboard("merch_general_settings")
        chat_manager.update_chat_message(chat_id, content, keyboard)
        return
    
    content = "üìè <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
    content += "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–º–µ—Ä—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.\n\n"
    content += f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: {', '.join(sorted(available_sizes))}\n\n"
    content += f"–ù–∞—á–Ω–µ–º —Å —Ä–∞–∑–º–µ—Ä–∞ {available_sizes[0]}. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ {available_sizes[0]}:"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä
    if user_id not in merch_data:
        merch_data[user_id] = {}
    merch_data[user_id]['current_size'] = available_sizes[0]
    merch_data[user_id]['sizes_to_setup'] = available_sizes.copy()
    
    keyboard = get_back_keyboard("merch_general_settings")
    
    chat_manager.update_chat_message(chat_id, content, keyboard)

def _show_next_size_or_finish(bot, chat_id: int, user_id: int, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–º–µ—Ä –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ"""
    user_data = merch_data.get(user_id, {})
    sizes_to_setup = user_data.get('sizes_to_setup', [])
    current_size = user_data.get('current_size')
    
    # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
    if current_size in sizes_to_setup:
        sizes_to_setup.remove(current_size)
    
    if sizes_to_setup:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–º–µ—Ä
        next_size = sizes_to_setup[0]
        user_data['current_size'] = next_size
        merch_data[user_id] = user_data
        
        content = f"üìè <b>–†–∞–∑–º–µ—Ä {next_size}</b>\n\n"
        content += f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ {next_size}:"
        
        keyboard = get_back_keyboard("merch_general_settings")
        chat_manager.update_chat_message(chat_id, content, keyboard)
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        _finish_product_creation(bot, chat_id, user_id, chat_manager)

def _finish_product_creation(bot, chat_id: int, user_id: int, chat_manager):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    user_data = merch_data.get(user_id, {})
    
    if not all(key in user_data for key in ['name', 'type', 'color', 'sizes']):
        content = "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        content += "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        keyboard = get_back_keyboard("merch_add_product")
        chat_manager.update_chat_message(chat_id, content, keyboard)
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    product_id = f"{user_data['type']}_{user_data['color']}"
    success = storage.add_product(
        product_id=product_id,
        name=user_data['name'],
        product_type=user_data['type'],
        base_color=user_data['color'],
        sizes=user_data['sizes']
    )
    
    if success:
        content = "‚úÖ <b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        content += f"üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {user_data['name']}\n"
        content += f"üîß <b>–¢–∏–ø:</b> {user_data['type']}\n"
        content += f"üé® <b>–¶–≤–µ—Ç:</b> {user_data['color']}\n"
        content += f"üìè <b>–†–∞–∑–º–µ—Ä—ã:</b> {', '.join(user_data['sizes'].keys())}\n"
        content += f"üìä <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {sum(user_data['sizes'].values())} —à—Ç.\n\n"
        content += "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del merch_data[user_id]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        bot.delete_state(user_id, chat_id)
        
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä", callback_data="merch_add_product"),
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="merch_view_products"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="merch_general_settings")
        )
        
        chat_manager.update_chat_message(chat_id, content, keyboard)
    else:
        content = "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        content += "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        keyboard = get_back_keyboard("merch_add_product")
        chat_manager.update_chat_message(chat_id, content, keyboard)

def _show_products_list(bot, chat_id: int, user_id: int, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤"""
    products = storage.list_products()
    
    if not products:
        content = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        content += "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
        content += "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É."
        
        keyboard = get_back_keyboard("merch_general_settings")
        chat_manager.update_chat_message(chat_id, content, keyboard)
        return
    
    content = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for product_id, product in products.items():
        status = "‚úÖ" if product.get("active", True) else "‚ùå"
        name = product.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        product_type = product.get("type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        color = product.get("base_color", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_qty = sum(size_data["qty_total"] for size_data in product.get("sizes", {}).values())
        
        content += f"{status} <b>{name}</b>\n"
        content += f"   –¢–∏–ø: {product_type}\n"
        content += f"   –¶–≤–µ—Ç: {color}\n"
        content += f"   –í—Å–µ–≥–æ: {total_qty} —à—Ç.\n\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        keyboard.add(
            InlineKeyboardButton(
                f"üîÑ {name}",
                callback_data=f"merch_product_toggle_{product_id}"
            ),
            InlineKeyboardButton(
                f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å {name}",
                callback_data=f"merch_product_edit_{product_id}"
            ),
            InlineKeyboardButton(
                f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å {name}",
                callback_data=f"merch_product_delete_{product_id}"
            )
        )
    
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="merch_general_settings"))
    
    chat_manager.update_chat_message(chat_id, content, keyboard)

def _show_sizes_management(bot, chat_id: int, user_id: int, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞–º–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    inventory = storage.get_all("inventory.json")
    current_sizes = list(inventory.get('sizes', {}).keys())
    
    content = "üìè <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞–º–∏</b>\n\n"
    content += "–¢–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ:\n"
    
    if current_sizes:
        for size in sorted(current_sizes):
            content += f"‚Ä¢ {size}\n"
    else:
        content += "‚ùå –†–∞–∑–º–µ—Ä—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã\n"
    
    content += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ä", callback_data="merch_add_size"),
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä", callback_data="merch_remove_size"),
        InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã", callback_data="merch_edit_sizes"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="merch_general_settings")
    )
    
    chat_manager.update_chat_message(chat_id, content, keyboard)

def _show_colors_management(bot, chat_id: int, user_id: int, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞–º–∏"""
    content = "üé® <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞–º–∏</b>\n\n"
    content += "–§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞–º–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.\n\n"
    content += "–ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç–∞: white, black, gray, blue, red, green, yellow, pink, purple, orange"
    
    keyboard = get_back_keyboard("merch_general_settings")
    
    chat_manager.update_chat_message(chat_id, content, keyboard)

def _show_order_statistics(bot, chat_id: int, user_id: int, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤"""
    summary = storage.get_inventory_summary()
    
    content = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ä—á–∞</b>\n\n"
    content += f"üì¶ <b>–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {summary.get('total_products', 0)}\n"
    content += f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b> {summary.get('active_products', 0)}\n"
    content += f"üìã <b>–í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü:</b> {summary.get('total_items', 0)}\n"
    content += f"üîí <b>–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ:</b> {summary.get('reserved_items', 0)}\n"
    content += f"üì§ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> {summary.get('total_items', 0) - summary.get('reserved_items', 0)}\n\n"
    
    if summary.get('products'):
        content += "<b>–î–µ—Ç–∞–ª–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º:</b>\n"
        for product in summary['products'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            status = "‚úÖ" if product.get('active') else "‚ùå"
            content += f"{status} {product['name']} ({product['color']})\n"
            for size, size_data in product['sizes'].items():
                content += f"   {size}: {size_data['available']}/{size_data['total']}\n"
            content += "\n"
    
    keyboard = get_back_keyboard("merch_general_settings")
    
    chat_manager.update_chat_message(chat_id, content, keyboard)

def _show_general_merch_settings(bot, chat_id: int, user_id: int, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞"""
    content = "‚öôÔ∏è <b>–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Ä—á–∞</b>\n\n"
    content += "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã –º–µ—Ä—á–∞:\n\n"
    content += "üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º\n"
    content += "üìè <b>–†–∞–∑–º–µ—Ä—ã:</b> –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ–π —Å–µ—Ç–∫–∏\n"
    content += "üé® <b>–¶–≤–µ—Ç–∞:</b> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä–æ–π\n"
    content += "üìä <b>–û—Å—Ç–∞—Ç–∫–∏:</b> –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞\n\n"
    content += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="merch_add_product"),
        InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="merch_view_products"),
        InlineKeyboardButton("üìè –†–∞–∑–º–µ—Ä—ã", callback_data="merch_manage_sizes"),
        InlineKeyboardButton("üé® –¶–≤–µ—Ç–∞", callback_data="merch_manage_colors"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="merch_general_settings")
    )
    
    chat_manager.update_chat_message(chat_id, content, keyboard)

def _toggle_product_status(bot, chat_id: int, user_id: int, product_id: str, chat_manager):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞"""
    success = storage.toggle_product_status(product_id)
    
    if success:
        product = storage.get_product(product_id)
        status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if product.get("active", True) else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        content = f"‚úÖ –¢–æ–≤–∞—Ä <b>{product.get('name', product_id)}</b> {status}"
    else:
        content = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞"
    
    keyboard = get_back_keyboard("merch_view_products")
    
    chat_manager.update_chat_message(chat_id, content, keyboard)

def _show_edit_product_form(bot, chat_id: int, user_id: int, product_id: str, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    content = "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
    content += "–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö."
    
    keyboard = get_back_keyboard("merch_view_products")
    
    chat_manager.update_chat_message(chat_id, content, keyboard)

def _show_delete_product_confirm(bot, chat_id: int, user_id: int, product_id: str, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    product = storage.get_product(product_id)
    name = product.get("name", product_id) if product else product_id
    
    content = f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
    content += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä <b>{name}</b>?\n\n"
    content += "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"merch_confirm_delete_{product_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="merch_view_products")
    )
    
    chat_manager.update_chat_message(chat_id, content, keyboard)

# –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞–º–∏
def _show_add_size_form(bot, chat_id: int, user_id: int, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
    content = "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞</b>\n\n"
    content += "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: M, L, XL, 2XL):\n\n"
    content += "üí° <b>–°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤"
    
    keyboard = get_back_keyboard("merch_manage_sizes")
    
    chat_manager.update_chat_message(chat_id, content, keyboard)

def _show_remove_size_selection(bot, chat_id: int, user_id: int, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    inventory = storage.get_all("inventory.json")
    current_sizes = list(inventory.get('sizes', {}).keys())
    
    if not current_sizes:
        content = "‚ùå <b>–ù–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        content += "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
        
        keyboard = get_back_keyboard("merch_manage_sizes")
        chat_manager.update_chat_message(chat_id, content, keyboard)
        return
    
    content = "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞</b>\n\n"
    content += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    for size in sorted(current_sizes):
        keyboard.add(
            InlineKeyboardButton(f"‚ùå {size}", callback_data=f"merch_delete_size_{size}")
        )
    
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="merch_manage_sizes"))
    
    chat_manager.update_chat_message(chat_id, content, keyboard)

def _show_delete_size_confirm(bot, chat_id: int, user_id: int, size_name: str, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞"""
    content = f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞</b>\n\n"
    content += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä <b>{size_name}</b>?\n\n"
    content += "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n"
    content += "–í—Å–µ —Ç–æ–≤–∞—Ä—ã —Å —ç—Ç–∏–º —Ä–∞–∑–º–µ—Ä–æ–º —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"merch_confirm_delete_size_{size_name}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="merch_manage_sizes")
    )
    
    chat_manager.update_chat_message(chat_id, content, keyboard)

def _delete_size(bot, chat_id: int, user_id: int, size_name: str, chat_manager):
    """–£–¥–∞–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        inventory = storage.get_all("inventory.json")
        current_sizes = inventory.get('sizes', {})
        
        if size_name not in current_sizes:
            content = f"‚ùå –†–∞–∑–º–µ—Ä <b>{size_name}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω"
            keyboard = get_back_keyboard("merch_manage_sizes")
            chat_manager.update_chat_message(chat_id, content, keyboard)
            return
        
        # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        del current_sizes[size_name]
        inventory['sizes'] = current_sizes
        
        # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
        products = inventory.get('products', {})
        for product_id, product in products.items():
            if 'sizes' in product and size_name in product['sizes']:
                del product['sizes'][size_name]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        success = storage.save_json_atomic("inventory.json", inventory)
        
        if success:
            content = f"‚úÖ –†–∞–∑–º–µ—Ä <b>{size_name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n"
            content += "–†–∞–∑–º–µ—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."
            
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –µ—â–µ —Ä–∞–∑–º–µ—Ä", callback_data="merch_remove_size"),
                InlineKeyboardButton("üìè –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞–º–∏", callback_data="merch_manage_sizes"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="merch_general_settings")
            )
            
            chat_manager.update_chat_message(chat_id, content, keyboard)
        else:
            content = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            keyboard = get_back_keyboard("merch_manage_sizes")
            chat_manager.update_chat_message(chat_id, content, keyboard)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ {size_name}: {e}")
        content = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞"
        keyboard = get_back_keyboard("merch_manage_sizes")
        chat_manager.update_chat_message(chat_id, content, keyboard)

def _show_edit_sizes_form(bot, chat_id: int, user_id: int, chat_manager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤"""
    inventory = storage.get_all("inventory.json")
    current_sizes = list(inventory.get('sizes', {}).keys())
    
    if not current_sizes:
        content = "‚ùå <b>–ù–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        content += "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
        
        keyboard = get_back_keyboard("merch_manage_sizes")
        chat_manager.update_chat_message(chat_id, content, keyboard)
        return
    
    content = "üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤</b>\n\n"
    content += "–¢–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–µ:\n"
    
    for size in sorted(current_sizes):
        content += f"‚Ä¢ {size}\n"
    
    content += "\nüí° <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —É–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π."
    
    keyboard = get_back_keyboard("merch_manage_sizes")
    
    chat_manager.update_chat_message(chat_id, content, keyboard)
