#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram.
"""

import os
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π."""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    try:
        from config.settings import Settings
        print("‚úÖ config.settings - OK")
        
        from bot.handlers import setup_handlers
        print("‚úÖ bot.handlers - OK")
        
        from bot.keyboards.main import get_main_keyboard
        print("‚úÖ bot.keyboards.main - OK")
        
        from bot.keyboards.catalog import get_catalog_keyboard
        print("‚úÖ bot.keyboards.catalog - OK")
        
        from bot.middlewares import setup_middlewares
        print("‚úÖ bot.middlewares - OK")
        
        from database.models import User, Product, Order
        print("‚úÖ database.models - OK")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_settings():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    print("\n‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    
    try:
        from config.settings import Settings
        
        # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏
        settings = Settings()
        print(f"‚úÖ BOT_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if settings.BOT_TOKEN else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
        print(f"‚úÖ DATABASE_URL: {settings.DATABASE_URL}")
        print(f"‚úÖ DEBUG: {settings.DEBUG}")
        print(f"‚úÖ LOG_LEVEL: {settings.LOG_LEVEL}")
        
        # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ ADMIN_IDS
        admin_ids = settings.get_admin_ids()
        print(f"‚úÖ ADMIN_IDS: {admin_ids}")
        
        # –¢–µ—Å—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        os.environ['ADMIN_IDS'] = '123,456,789'
        settings2 = Settings()
        admin_ids2 = settings2.get_admin_ids()
        print(f"‚úÖ ADMIN_IDS (—Ç–µ—Å—Ç): {admin_ids2}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return False

def test_keyboards():
    """–¢–µ—Å—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä."""
    print("\n‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä...")
    
    try:
        from bot.keyboards.main import get_main_keyboard
        from bot.keyboards.catalog import get_catalog_keyboard, get_product_keyboard
        
        main_kb = get_main_keyboard()
        print(f"‚úÖ –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞: {len(main_kb.keyboard)} —Ä—è–¥–æ–≤")
        
        catalog_kb = get_catalog_keyboard()
        print(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: {len(catalog_kb.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        product_kb = get_product_keyboard("test_id")
        print(f"‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–≤–∞—Ä–∞: {len(product_kb.inline_keyboard)} —Ä—è–¥–æ–≤")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä: {e}")
        return False

def test_database_models():
    """–¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    print("\nüóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ë–î...")
    
    try:
        from database.models import User, Product, Order, Category, OrderItem
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª–∏ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å
        user_fields = [attr for attr in dir(User) if not attr.startswith('_')]
        print(f"‚úÖ User –º–æ–¥–µ–ª—å: {len(user_fields)} –ø–æ–ª–µ–π")
        
        product_fields = [attr for attr in dir(Product) if not attr.startswith('_')]
        print(f"‚úÖ Product –º–æ–¥–µ–ª—å: {len(product_fields)} –ø–æ–ª–µ–π")
        
        order_fields = [attr for attr in dir(Order) if not attr.startswith('_')]
        print(f"‚úÖ Order –º–æ–¥–µ–ª—å: {len(order_fields)} –ø–æ–ª–µ–π")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–µ–π –ë–î: {e}")
        return False

async def test_handlers_setup():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    try:
        from aiogram import Dispatcher
        from bot.handlers import setup_handlers
        from bot.middlewares import setup_middlewares
        
        dp = Dispatcher()
        setup_middlewares(dp)
        setup_handlers(dp)
        
        print(f"‚úÖ –î–∏—Å–ø–µ—Ç—á–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"‚úÖ –†–æ—É—Ç–µ—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: {len(dp.sub_routers)}")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è YaEduMerchBot\n")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", test_settings),
        ("–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã", test_keyboards),
        ("–ú–æ–¥–µ–ª–∏ –ë–î", test_database_models),
        ("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏", test_handlers_setup),
    ]
    
    passed = 0
    total = len(tests)
    
    for name, test_func in tests:
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            if result:
                passed += 1
                print(f"‚úÖ {name} - –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {name} - –û–®–ò–ë–ö–ê: {e}")
        
        print()
    
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º.")
        print("\nüìã –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather –≤ Telegram")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   set BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å")
        print("   set ADMIN_IDS=–≤–∞—à_telegram_id")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
    
    return passed == total

if __name__ == "__main__":
    asyncio.run(main())
