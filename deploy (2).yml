name: CI-CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write   # нужно для комментария к коммиту
  packages: write

concurrency:
  group: deploy-${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set IMAGE env (lowercase username)
        run: echo "IMAGE=$(echo '${{ secrets.DOCKERHUB_USERNAME }}' | tr '[:upper:]' '[:lower:]')/tg-bot-pro" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE }}:latest
            ${{ env.IMAGE }}:${{ github.sha }}

  deploy:
    needs: build-and-push-docker
    runs-on: [self-hosted, Windows, X64, tg-bot]
    timeout-minutes: 30
    env:
      TG_Token: ${{ secrets.TG_Token }}
    steps:
      - uses: actions/checkout@v4

      - name: Set IMAGE env (lowercase username)
        shell: powershell
        run: |
          $u='${{ secrets.DOCKERHUB_USERNAME }}'.ToLower()
          "IMAGE=$u/tg-bot-pro" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Host "IMAGE=$u/tg-bot-pro"

      - name: Runner & Docker info
        shell: powershell
        run: |
          whoami
          $PSVersionTable
          docker version
          (docker compose version) -or (docker-compose --version)

      - name: Login DockerHub on remote
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Pull image
        shell: powershell
        run: |
          Write-Host "Pulling $($env:IMAGE):latest"
          docker pull "$($env:IMAGE):latest"

      - name: Compose config (debug)
        shell: powershell
        run: docker compose -f compose.yml config

      - name: Up stack
        shell: powershell
        env:
          TG_Token: ${{ env.TG_Token }}
        run: |
          echo "::add-mask::${env:TG_Token}"
          docker compose -f compose.yml -p tg_bot_pro up -d --remove-orphans --no-build

      # ===== ЛОГИ: сбор, маскировка, артефакт, комментарий к коммиту =====
      - name: Collect deploy logs (always)
        shell: powershell
        if: always()
        continue-on-error: true
        run: |
          docker compose -f compose.yml -p tg_bot_pro logs --no-color > deploy.log 2>&1
          if (!(Test-Path -Path 'deploy.log')) { '' | Out-File -FilePath 'deploy.log' -Encoding utf8 }

      - name: Sanitize logs (mask tokens)
        shell: powershell
        if: always()
        run: |
          $c = Get-Content -Path 'deploy.log' -Raw -ErrorAction SilentlyContinue
          if ($null -eq $c) { $c = '' }
          Add-Type -AssemblyName 'System.Text.RegularExpressions'
          $c = [System.Text.RegularExpressions.Regex]::Replace($c, '\b\d{9}:[A-Za-z0-9_-]{35}\b', '***')  # Telegram
          $c = [System.Text.RegularExpressions.Regex]::Replace($c, '(?i)(BOT_TOKEN|API_KEY|TOKEN|SECRET)\s*[:=]\s*([^\s]+)', '$1=***')
          Set-Content -Path 'deploy.sanitized.log' -Value $c -Encoding UTF8
          (Get-Content 'deploy.sanitized.log' -Tail 200) | Out-File 'deploy.tail.log' -Encoding UTF8
          if (!(Test-Path -Path 'deploy.tail.log')) { '' | Out-File -FilePath 'deploy.tail.log' -Encoding utf8 }

      - name: Upload full logs as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-logs-${{ github.sha }}
          path: deploy.sanitized.log
          retention-days: 7

      - name: Comment logs on commit (tail)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let body = 'No logs captured';
            try {
              if (fs.existsSync('deploy.tail.log')) {
                const tail = fs.readFileSync('deploy.tail.log','utf8');
                body = "```\n" + tail + "\n```";
              }
            } catch (e) {}
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: "🚀 Deploy logs (last 200 lines):\n" + body
            });

      - name: Step Summary (tail)
        if: always()
        shell: powershell
        run: |
          "### Deploy logs (last 200 lines)" | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
          '```' | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8
          if (Test-Path 'deploy.tail.log') { Get-Content 'deploy.tail.log' | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8 }
          '```' | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding utf8

      - name: Cleanup
        shell: powershell
        run: docker image prune -f
